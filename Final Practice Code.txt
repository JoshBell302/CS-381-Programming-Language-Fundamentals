last ::= string
first ::= string
name::= last, first | first (char .)* last
OR
name ::= first, last | first middle last
middle ::= char. middle | <epsilon>
>>>
date Name = LF String String
    | FML String [Char] String

----

name ::= [title] last
title ::= Dr. | Lord | Your Majesty Queen
>>>
data Title = Dr | Lord | Queen
data Name = N (Maybe Title) String

----

% PROLOG %

----

plays(john,piano).
plays(john,cello).
plays(jill,cello).
plays(mike,piano).

a) Write a goal that finds all persons who play the cello
plays(X,cello).
b) Define a predicate duet/2 that finds two persons who can play a duet with the same instrument.
duet(X,Y) :- plays(X,Z), plays(Y,Z), X\=Y.
c) Define a predicate talent/1 that yields true for persons who can play more than one instrument.
talent(X) :- plays(X,Y), plays(X,Z), Y\=Z.

----

%Consider the following predicates thatr describe movies (first argument) and their lead actors (second argument) offered by two different streaming services.%

netflix(m,a).
netflix(o,a).
netflix(p,b).

hbo(m,a).
hbo(n,b).
hbo(p,b).

a) Define a predicate movies/1 that can produce all the movies available on any of the two streaming services.
movies(M) :- netflix(M,_).
movies(M) :- hbo(M,_).
b) Using the predicate in (a), write a goal/querry that lists all movies that can be watched irrespective of the streaming service that offers it.
movies(M).

----

%Static & Dynamic Typing%

----

if x=3 then x-1 else not x
>>>
S: Type Error
D: Int if x=3, otherwise Type Error
X: Int

if x<2 then even x else x
>>>
S: Type Error
D: Bool if x<2, otherwise Int
X: Int

if head x then x else tail x
>>>
S: [Bool]
D: [Bool]
X: [Bool]

if x then x+1 else x-1
>>>
S: Type Error
D: Type Error
X: Bool

if False then "Hello" else x
>>>
S: String
D: String
X: String

if fst x==1 then x+1 else fst x
>>>
S: Type Error
D: Int if fit x/=1, otherwise Type Error
X: (Int,a)

not (tail [x,True])
>>>
S: Type Error
D: Type Error
X: Bool

(head [x,True]) + 1
>>>
S: Type Error
D: Int
X: Int

head [1 'div' x,x]
>>>
S: Int
D: Int ("Runtime Error if x==0" is also OK)
X: Int

if tail x==[] then 3:x else 3+x
>>>
S: Type Error
D: [Int] if tail x==[], otherwise Bool
X: [Int]

if x then x+1 else x
>>>
S: Type Error
D: Bool if x==False, otherwise Type Error
X: Bool

tail [even x]
>>>
S: [Bool]
D: [Bool]
X: Int

if even x then x else even (x+1)
>>>
S: Type Error
D: Int if even x, otherwise Bool
X: Int

----

if f(3) then 3 else 4
Variables: f:: Int -> Bool

----

%Static & Dynamic Scoping%

----

01	{ int x;
02	x := 2;
03	{ int f(int y) {
04	x := x*y;
05	return (x+1);
06	};
07	{ int x;
08	x := 4;
09	x := f(x-1);
10	};
11	};
12	}

Draw the runtime stacks that result immedietly after the statements on lines 8,4 and 9 have been executed.

>>>
Dynamic:
2: 	[x:2]
6:	[f:{}, x:2]
after 8:	[x:4, f:{}, x:2]
3:	[y:3, x:4, f:{}, x:2]
after 4:	[y:3, x:12, f:{}, x:2]
after 9:	[x:13, f:{}, x:2]

Static:
2: 	[x:2]
6:	[f:{}, x:2]
after 8:	[x:4, f:{}, x:2]
3:	[y:3, x:4, f:{}, x:2]
after 4:	[y:3, x:4, f:{}, x:6]
after 9:	[x:7, f:{}, x:6]

----

01	{ int a;
02	a:= 3;
03	{ int f(int b) {
04	a:= 2*b;
05	return (a+b);
06	};
07	a := f(a-1);
08	};
09	}

>>>

Call by Name:
2	[a:3]
3	[f:{}, a:3]
7 
>>
	[b:a-1, f:{}, a:3]	{b -> 2, 2*b -> 4}
4	[b:a-1, f:{}, a:4]	{b -> 3, a+b -> 7}
5	[res: 7, b:a-1, f:{}, a:4]
<<
7 [f:{}, a:7]

Call by Need:
2	[a:3]
3	[f:{}, a:3]
7 
>>
	[b:a-1, f:{}, a:3]	{b -> 2, 2*b -> 4}
4	[b:2, f:{}, a:4]	{b -> 2, a+b -> 6}
5	[res: 6, b:2, f:{}, a:4]
<<
7 [f:{}, a:6]
































 